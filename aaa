def count_nodes_with_xor_value(root, graph, k):
    from collections import defaultdict

    xor_value = {}
    count = defaultdict(int)

    def dfs(node, parent, current_xor):
        xor_value[node] = current_xor
        count[current_xor] += 1
        for neighbor, weight in graph[node]:
            if neighbor != parent:
                dfs(neighbor, node, current_xor ^ weight)

    dfs(root, -1, 0)

    target_xor = xor_value[root] ^ k
    return count[target_xor]

# Example usage:
graph = {
    1: [(2, 2), (3, 3)],
    2: [(1, 2)],
    3: [(1, 3)]
}
root = 2
k = 2
print(count_nodes_with_xor_value(root, graph, k))

