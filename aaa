import math


class Graph(object):
    def __init__(self, maps):
        self.maps = maps
        self.nodenum = len(self.maps)
        self.edgenum = self.get_edgenum()

    def get_edgenum(self):
        count = 0
        for i in range(self.nodenum):
            for j in range(i):
                if self.maps[i][j] > 0 and self.maps[i][j] < 9999:
                    count += 1
        return count

    def kruskal(self):
        max_distance = -1
        res = []
        if self.nodenum <= 0 or self.edgenum < self.nodenum - 1:
            return res
        edge_list = []
        for i in range(self.nodenum):
            for j in range(i, self.nodenum):
                if self.maps[i][j] < 9999:
                    edge_list.append([i, j, self.maps[i][j]])  # 按[begin, end, weight]形式加入
        edge_list.sort(key=lambda a: a[2])  # 已经排好序的边集合

        group = [[i] for i in range(self.nodenum)]
        for edge in edge_list:
            for i in range(len(group)):
                if edge[0] in group[i]:
                    m = i
                if edge[1] in group[i]:
                    n = i
            if m != n:
                res.append(edge)
                max_distance = max(max_distance, edge[2])
                group[m] = group[m] + group[n]
                group[n] = []
        return max_distance


n = int(input())
point = []
for i in range(n):
    x, y = map(int, input().split())
    point.append((x, y))
# 计算point每个元素之前的最大距离
maps = []
for i in range(n):
    distance = []
    for j in range(n):
        distance.append(math.sqrt((point[i][0] - point[j][0]) ** 2 + (point[i][1] - point[j][1]) ** 2))
    maps.append(distance)
graph = Graph(maps)
max_distance = graph.kruskal()
print(math.ceil(max_distance / 2))
