from collections import defaultdict


def count_nodes_with_xor_value(root, graph, k):
    

    xor_value = {}
    count = defaultdict(int)

    def dfs(node, parent, current_xor):
        xor_value[node] = current_xor
        count[current_xor] += 1
        for neighbor, weight in graph[node]:
            if neighbor != parent:
                dfs(neighbor, node, current_xor ^ weight)

    dfs(root, -1, 0)

    target_xor = xor_value[root] ^ k
    return count[target_xor]


graph = defaultdict(list)
n, q = map(int, input().split())
for i in (n - 1):
    u, v, w = map(int, input().split())
    graph[u].append((v, w))
    graph[v].append((u, w))

for i in range(q):
    root, k = map(int, input().split())
    print(count_nodes_with_xor_value(root, graph, k))
